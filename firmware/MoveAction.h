/*
 * MoveAction.h
 *
 *  Created on: 2016/11/11
 *      Author: kerikun11
 */

#ifndef MOVEACTION_H_
#define MOVEACTION_H_

#include "mbed.h"
#include "config.h"

#define MOVE_ACTION_PERIOD		1000
#define WALL_AVOID_ENABLED		false
#define WALL_ATTACH_ENABLED		false

#define LOOK_AHEAD_COUNT		60
#define TRAJECTORY_PROP_GAIN	200

class Straight {
public:
	Straight() {
	}
	Position getNextDir(const Position cur, const float dx) {
		Position dir = (getNextPoint(cur) - cur).rotate(-cur.theta);
		dir.x = dir.x * dx / interval;
		dir.theta = atan(dir.y / (dir.x + 1));
		dir /= LOOK_AHEAD_COUNT;
		return dir;
	}
private:
	const float interval = 0.3f;
	Position getNextPoint(const Position& pos) {
		return Position(pos.x + interval * (1 + LOOK_AHEAD_COUNT), 0, 0);
	}
};

class Curve90 {
public:
	Curve90() {
		last_index = 0;
	}
	Position getNextDir(const Position cur, const float dx) {
		Position dir = (getNextPoint(cur) - cur).rotate(-cur.theta);
		dir.x = dir.x * dx / interval;
		dir.theta = atan(dir.y / dir.x);
		dir /= LOOK_AHEAD_COUNT;
		return dir;
	}
private:
	const int length = 505;
	const float interval = 0.3f;
	int last_index;
	Position getNextPoint(const Position& pos) {
		for (int i = last_index; i < length * 100; i++) {
//			Position diff = get(i) - pos;
//			if (diff.x > 0 && diff.y > 0) {
//				last_index = i;
//				return get(last_index + LOOK_AHEAD_COUNT);
//			}
			Position target = get(i);
			Position dir = (target - pos).rotate(-target.theta);
			if (dir.x > 0) {
				last_index = i;
				return get(last_index + LOOK_AHEAD_COUNT);
			}
		}
		return Position(0, 0, 0);
	}
	Position get(int index) {
		if (index > length - 1) {
			return Position(90, 90.0 + interval * (index - length), M_PI / 2);
		}
		static const float data[][3] = { { 0, 0, 0 }, { 0.3, 0, 0 }, { 0.6, 0, 0 }, { 0.9, 0, 0 }, {
				1.2, 0, 0 }, { 1.5, 0, 0 }, { 1.8, 0, 0 }, { 2.1, 0, 0 }, { 2.4, 0, 0 },
				{ 2.7, 0, 0 }, { 3, 0, 0 }, { 3.3, 0, 0 }, { 3.6, 0, 0 }, { 3.9, 0, 0 },
				{ 4.2, 0, 0 }, { 4.5, 0, 0 }, { 4.8, 0, 0 }, { 5.1, 0, 0 }, { 5.4, 0, 0 }, { 5.7, 0,
						0 }, { 6, 0, 0 }, { 6.3, 0, 0 }, { 6.4856, 0, 0 }, { 6.7856, 0, 0 }, {
						7.0856, 0, 0 }, { 7.3856, 1.1324e-05, 3.7745e-05 }, { 7.6856, 4.5294e-05,
						0.00011324 }, { 7.9856, 0.00011324, 0.00022647 }, { 8.2856, 0.00022647,
						0.00037745 }, { 8.5856, 0.00039632, 0.00056618 }, { 8.8856, 0.00063412,
						0.00079265 }, { 9.1856, 0.00095117, 0.0010569 }, { 9.4856, 0.0013588,
						0.0013588 }, { 9.7856, 0.0018684, 0.0016985 },
				{ 10.086, 0.0024912, 0.002076 }, { 10.386, 0.0032385, 0.0024912 }, { 10.686,
						0.0041218, 0.0029441 }, { 10.986, 0.0051522, 0.0034348 }, { 11.286,
						0.0063412, 0.0039632 }, { 11.586, 0.0077, 0.0045294 }, { 11.886, 0.00924,
						0.0051333 }, { 12.186, 0.010972, 0.005775 },
				{ 12.486, 0.012909, 0.0064544 }, { 12.786, 0.01506, 0.0071716 }, { 13.086, 0.017438,
						0.0079265 }, { 13.386, 0.020054, 0.0087191 },
				{ 13.686, 0.022919, 0.0095495 }, { 13.986, 0.026044, 0.010418 }, { 14.285, 0.029441,
						0.011324 }, { 14.585, 0.033121, 0.012267 }, { 14.885, 0.037095, 0.013248 },
				{ 15.185, 0.041375, 0.014268 }, { 15.485, 0.045973, 0.015324 }, { 15.785, 0.050898,
						0.016419 }, { 16.085, 0.056163, 0.017551 }, { 16.385, 0.061779, 0.018722 },
				{ 16.685, 0.067758, 0.019929 }, { 16.985, 0.07411, 0.021175 }, { 17.285, 0.080847,
						0.022458 }, { 17.585, 0.08798, 0.023779 }, { 17.885, 0.095521, 0.025138 }, {
						18.185, 0.10348, 0.026535 }, { 18.485, 0.11187, 0.027969 }, { 18.785,
						0.1207, 0.029441 }, { 19.084, 0.12998, 0.030951 }, { 19.384, 0.13973,
						0.032498 }, { 19.684, 0.14996, 0.034084 }, { 19.984, 0.16067, 0.035707 }, {
						20.284, 0.17187, 0.037368 }, { 20.583, 0.18359, 0.039066 }, { 20.883,
						0.19583, 0.040802 }, { 21.183, 0.2086, 0.042576 }, { 21.483, 0.22191,
						0.044388 }, { 21.782, 0.23577, 0.046238 }, { 22.082, 0.25021, 0.048125 }, {
						22.382, 0.26522, 0.05005 }, { 22.681, 0.28081, 0.052013 }, { 22.981,
						0.29701, 0.054013 }, { 23.28, 0.31381, 0.056051 }, { 23.58, 0.33124,
						0.058127 }, { 23.879, 0.3493, 0.060241 }, { 24.179, 0.36801, 0.062393 }, {
						24.478, 0.38737, 0.064582 }, { 24.777, 0.4074, 0.066809 }, { 25.077, 0.4281,
						0.069073 }, { 25.376, 0.4495, 0.071376 }, { 25.675, 0.47159, 0.073716 }, {
						25.974, 0.4944, 0.076094 }, { 26.273, 0.51793, 0.07851 }, { 26.572, 0.54219,
						0.080963 }, { 26.871, 0.5672, 0.083454 }, { 27.17, 0.59296, 0.085983 }, {
						27.469, 0.61949, 0.08855 }, { 27.768, 0.6468, 0.091154 }, { 28.066, 0.6749,
						0.093796 }, { 28.365, 0.7038, 0.096476 }, { 28.663, 0.7335, 0.099194 }, {
						28.962, 0.76404, 0.10195 }, { 29.26, 0.7954, 0.10474 }, { 29.559, 0.82761,
						0.10757 }, { 29.857, 0.86068, 0.11044 }, { 30.155, 0.89461, 0.11335 }, {
						30.453, 0.92942, 0.11629 }, { 30.751, 0.96512, 0.11927 }, { 31.048, 1.0017,
						0.12229 }, { 31.346, 1.0392, 0.12535 }, { 31.644, 1.0776, 0.12845 }, {
						31.941, 1.117, 0.13158 }, { 32.238, 1.1573, 0.13475 }, { 32.535, 1.1986,
						0.13796 }, { 32.832, 1.2408, 0.1412 }, { 33.129, 1.284, 0.14449 }, { 33.426,
						1.3282, 0.14781 }, { 33.723, 1.3733, 0.15117 }, { 34.019, 1.4195, 0.15457 },
				{ 34.315, 1.4667, 0.158 }, { 34.611, 1.515, 0.16147 }, { 34.907, 1.5642, 0.16498 },
				{ 35.203, 1.6146, 0.16853 }, { 35.499, 1.6659, 0.17212 },
				{ 35.794, 1.7184, 0.17574 }, { 36.089, 1.7719, 0.1794 }, { 36.384, 1.8265, 0.1831 },
				{ 36.679, 1.8823, 0.18684 }, { 36.974, 1.9391, 0.19061 },
				{ 37.268, 1.9971, 0.19442 }, { 37.562, 2.0562, 0.19827 },
				{ 37.856, 2.1164, 0.20216 }, { 38.15, 2.1778, 0.20609 },
				{ 38.443, 2.2403, 0.21005 }, { 38.736, 2.3041, 0.21405 },
				{ 39.029, 2.369, 0.21809 }, { 39.322, 2.4351, 0.22217 },
				{ 39.614, 2.5024, 0.22628 }, { 39.906, 2.5709, 0.23043 },
				{ 40.198, 2.6406, 0.23462 }, { 40.489, 2.7116, 0.23885 },
				{ 40.78, 2.7838, 0.24312 }, { 41.071, 2.8573, 0.24742 }, { 41.362, 2.932, 0.25176 },
				{ 41.652, 3.008, 0.25614 }, { 41.942, 3.0853, 0.26055 },
				{ 42.231, 3.1639, 0.26501 }, { 42.521, 3.2438, 0.2695 }, { 42.809, 3.325, 0.27403 },
				{ 43.098, 3.4075, 0.2786 }, { 43.386, 3.4913, 0.2832 }, { 43.674, 3.5765, 0.28784 },
				{ 43.961, 3.663, 0.29252 }, { 44.248, 3.7508, 0.29724 },
				{ 44.534, 3.8401, 0.30196 }, { 44.82, 3.9306, 0.30667 },
				{ 45.106, 4.0225, 0.31139 }, { 45.391, 4.1158, 0.31611 },
				{ 45.676, 4.2104, 0.32082 }, { 45.96, 4.3063, 0.32554 },
				{ 46.244, 4.4036, 0.33025 }, { 46.527, 4.5023, 0.33497 },
				{ 46.81, 4.6022, 0.33969 }, { 47.092, 4.7035, 0.3444 }, { 47.374, 4.8061, 0.34912 },
				{ 47.655, 4.9101, 0.35384 }, { 47.936, 5.0153, 0.35855 },
				{ 48.217, 5.1219, 0.36327 }, { 48.497, 5.2299, 0.36799 },
				{ 48.776, 5.3391, 0.3727 }, { 49.055, 5.4497, 0.37742 },
				{ 49.333, 5.5615, 0.38213 }, { 49.611, 5.6747, 0.38685 },
				{ 49.888, 5.7892, 0.39157 }, { 50.165, 5.905, 0.39628 }, { 50.441, 6.0221, 0.401 },
				{ 50.717, 6.1405, 0.40572 }, { 50.992, 6.2602, 0.41043 },
				{ 51.267, 6.3812, 0.41515 }, { 51.541, 6.5035, 0.41986 },
				{ 51.814, 6.6271, 0.42458 }, { 52.087, 6.752, 0.4293 }, { 52.359, 6.8781, 0.43401 },
				{ 52.631, 7.0055, 0.43873 }, { 52.902, 7.1343, 0.44345 },
				{ 53.172, 7.2643, 0.44816 }, { 53.442, 7.3955, 0.45288 },
				{ 53.711, 7.5281, 0.4576 }, { 53.979, 7.6619, 0.46231 },
				{ 54.247, 7.7969, 0.46703 }, { 54.514, 7.9333, 0.47174 },
				{ 54.781, 8.0709, 0.47646 }, { 55.047, 8.2097, 0.48118 },
				{ 55.312, 8.3498, 0.48589 }, { 55.577, 8.4912, 0.49061 },
				{ 55.841, 8.6337, 0.49533 }, { 56.104, 8.7776, 0.50004 },
				{ 56.367, 8.9227, 0.50476 }, { 56.629, 9.069, 0.50947 }, { 56.89, 9.2165, 0.51419 },
				{ 57.15, 9.3653, 0.51891 }, { 57.41, 9.5153, 0.52362 }, { 57.669, 9.6665, 0.52834 },
				{ 57.928, 9.819, 0.53306 }, { 58.185, 9.9727, 0.53777 },
				{ 58.442, 10.128, 0.54249 }, { 58.698, 10.284, 0.54721 },
				{ 58.954, 10.441, 0.55192 }, { 59.208, 10.599, 0.55664 },
				{ 59.462, 10.759, 0.56135 }, { 59.716, 10.92, 0.56607 },
				{ 59.968, 11.082, 0.57079 }, { 60.22, 11.245, 0.5755 }, { 60.471, 11.41, 0.58022 },
				{ 60.721, 11.576, 0.58494 }, { 60.97, 11.742, 0.58965 }, { 61.219, 11.91, 0.59437 },
				{ 61.466, 12.079, 0.59909 }, { 61.713, 12.25, 0.6038 }, { 61.96, 12.421, 0.60852 },
				{ 62.205, 12.594, 0.61323 }, { 62.449, 12.768, 0.61795 },
				{ 62.693, 12.943, 0.62267 }, { 62.936, 13.119, 0.62738 },
				{ 63.178, 13.296, 0.6321 }, { 63.419, 13.474, 0.63682 }, { 63.66, 13.654, 0.64153 },
				{ 63.899, 13.835, 0.64625 }, { 64.138, 14.016, 0.65096 },
				{ 64.375, 14.199, 0.65568 }, { 64.612, 14.383, 0.6604 },
				{ 64.848, 14.569, 0.66511 }, { 65.084, 14.755, 0.66983 },
				{ 65.318, 14.942, 0.67455 }, { 65.551, 15.131, 0.67926 },
				{ 65.784, 15.32, 0.68398 }, { 66.015, 15.511, 0.6887 }, { 66.246, 15.703, 0.69341 },
				{ 66.476, 15.895, 0.69813 }, { 66.705, 16.089, 0.70284 },
				{ 66.933, 16.284, 0.70756 }, { 67.16, 16.48, 0.71228 }, { 67.386, 16.678, 0.71699 },
				{ 67.611, 16.876, 0.72171 }, { 67.836, 17.075, 0.72643 },
				{ 68.059, 17.275, 0.73114 }, { 68.281, 17.477, 0.73586 },
				{ 68.503, 17.679, 0.74058 }, { 68.723, 17.883, 0.74529 },
				{ 68.943, 18.087, 0.75001 }, { 69.161, 18.293, 0.75472 },
				{ 69.379, 18.499, 0.75944 }, { 69.595, 18.707, 0.76416 },
				{ 69.811, 18.915, 0.76887 }, { 70.026, 19.125, 0.77359 },
				{ 70.239, 19.336, 0.77831 }, { 70.452, 19.547, 0.78302 },
				{ 70.663, 19.76, 0.78774 }, { 70.874, 19.973, 0.79245 },
				{ 71.084, 20.188, 0.79717 }, { 71.292, 20.404, 0.80189 }, { 71.5, 20.62, 0.8066 }, {
						71.706, 20.838, 0.81132 }, { 71.912, 21.056, 0.81604 }, { 72.117, 21.276,
						0.82075 }, { 72.32, 21.496, 0.82547 }, { 72.522, 21.718, 0.83019 }, {
						72.724, 21.94, 0.8349 }, { 72.924, 22.163, 0.83962 }, { 73.123, 22.388,
						0.84433 }, { 73.322, 22.613, 0.84905 }, { 73.519, 22.839, 0.85377 }, {
						73.715, 23.066, 0.85848 }, { 73.91, 23.294, 0.8632 }, { 74.104, 23.523,
						0.86792 }, { 74.297, 23.753, 0.87263 }, { 74.488, 23.983, 0.87735 }, {
						74.679, 24.215, 0.88206 }, { 74.869, 24.448, 0.88678 }, { 75.057, 24.681,
						0.8915 }, { 75.244, 24.915, 0.89621 }, { 75.431, 25.15, 0.90093 }, { 75.616,
						25.386, 0.90565 }, { 75.8, 25.623, 0.91036 }, { 75.983, 25.861, 0.91508 }, {
						76.165, 26.1, 0.9198 }, { 76.345, 26.339, 0.92451 }, { 76.525, 26.58,
						0.92923 }, { 76.703, 26.821, 0.93394 }, { 76.88, 27.063, 0.93866 }, {
						77.057, 27.306, 0.94338 }, { 77.232, 27.549, 0.94809 }, { 77.405, 27.794,
						0.95281 }, { 77.578, 28.039, 0.95753 }, { 77.75, 28.285, 0.96224 }, { 77.92,
						28.532, 0.96696 }, { 78.089, 28.78, 0.97168 }, { 78.257, 29.029, 0.97639 },
				{ 78.424, 29.278, 0.98111 }, { 78.59, 29.528, 0.98582 },
				{ 78.754, 29.779, 0.99054 }, { 78.917, 30.031, 0.99526 },
				{ 79.079, 30.283, 0.99997 }, { 79.24, 30.536, 1.0047 }, { 79.4, 30.79, 1.0094 }, {
						79.559, 31.045, 1.0141 }, { 79.716, 31.3, 1.0188 },
				{ 79.872, 31.557, 1.0236 }, { 80.027, 31.814, 1.0283 }, { 80.18, 32.071, 1.033 }, {
						80.333, 32.33, 1.0377 }, { 80.484, 32.589, 1.0424 }, { 80.634, 32.848,
						1.0471 }, { 80.783, 33.109, 1.0519 }, { 80.931, 33.37, 1.0566 }, { 81.077,
						33.632, 1.0613 }, { 81.222, 33.895, 1.066 }, { 81.366, 34.158, 1.0707 }, {
						81.508, 34.422, 1.0754 }, { 81.65, 34.686, 1.0802 },
				{ 81.79, 34.952, 1.0849 }, { 81.929, 35.218, 1.0896 }, { 82.066, 35.484, 1.0943 }, {
						82.203, 35.751, 1.099 }, { 82.338, 36.019, 1.1037 }, { 82.472, 36.288,
						1.1084 }, { 82.604, 36.557, 1.1132 }, { 82.735, 36.827, 1.1179 }, { 82.865,
						37.097, 1.1226 }, { 82.994, 37.368, 1.1273 }, { 83.122, 37.64, 1.132 }, {
						83.248, 37.912, 1.1367 }, { 83.373, 38.185, 1.1415 }, { 83.496, 38.458,
						1.1462 }, { 83.619, 38.732, 1.1509 }, { 83.74, 39.006, 1.1556 }, { 83.859,
						39.281, 1.1603 }, { 83.978, 39.557, 1.165 }, { 84.095, 39.833, 1.1698 }, {
						84.211, 40.11, 1.1745 }, { 84.325, 40.387, 1.1792 }, { 84.438, 40.665,
						1.1839 }, { 84.55, 40.944, 1.1886 }, { 84.661, 41.222, 1.1933 }, { 84.77,
						41.502, 1.1981 }, { 84.878, 41.782, 1.2028 }, { 84.984, 42.062, 1.2075 }, {
						85.09, 42.343, 1.2122 }, { 85.194, 42.624, 1.2169 }, { 85.296, 42.906,
						1.2216 }, { 85.398, 43.189, 1.2264 }, { 85.498, 43.472, 1.2311 }, { 85.596,
						43.755, 1.2358 }, { 85.694, 44.039, 1.2405 }, { 85.79, 44.323, 1.2452 }, {
						85.884, 44.608, 1.2499 }, { 85.977, 44.893, 1.2547 }, { 86.069, 45.178,
						1.2594 }, { 86.16, 45.464, 1.2641 }, { 86.249, 45.751, 1.2688 }, { 86.337,
						46.038, 1.2735 }, { 86.424, 46.325, 1.2782 }, { 86.509, 46.613, 1.283 }, {
						86.593, 46.901, 1.2876 }, { 86.675, 47.189, 1.2922 }, { 86.756, 47.478,
						1.2968 }, { 86.836, 47.767, 1.3013 }, { 86.915, 48.057, 1.3058 }, { 86.992,
						48.346, 1.3102 }, { 87.068, 48.637, 1.3147 }, { 87.143, 48.927, 1.319 }, {
						87.216, 49.218, 1.3234 }, { 87.288, 49.509, 1.3277 }, { 87.359, 49.801,
						1.3319 }, { 87.429, 50.092, 1.3362 }, { 87.498, 50.385, 1.3404 }, { 87.565,
						50.677, 1.3445 }, { 87.631, 50.969, 1.3486 }, { 87.696, 51.262, 1.3527 }, {
						87.76, 51.556, 1.3567 }, { 87.822, 51.849, 1.3607 }, { 87.884, 52.143,
						1.3647 }, { 87.944, 52.436, 1.3686 }, { 88.003, 52.731, 1.3725 }, { 88.061,
						53.025, 1.3764 }, { 88.118, 53.32, 1.3802 }, { 88.173, 53.614, 1.384 }, {
						88.228, 53.909, 1.3877 }, { 88.282, 54.204, 1.3914 },
				{ 88.334, 54.5, 1.3951 }, { 88.385, 54.795, 1.3987 }, { 88.436, 55.091, 1.4023 }, {
						88.485, 55.387, 1.4058 }, { 88.533, 55.683, 1.4093 }, { 88.58, 55.979,
						1.4128 }, { 88.627, 56.276, 1.4162 }, { 88.672, 56.572, 1.4196 }, { 88.716,
						56.869, 1.423 }, { 88.759, 57.166, 1.4263 }, { 88.801, 57.463, 1.4296 }, {
						88.843, 57.76, 1.4328 }, { 88.883, 58.058, 1.436 },
				{ 88.922, 58.355, 1.4392 }, { 88.961, 58.652, 1.4424 }, { 88.998, 58.95, 1.4454 }, {
						89.035, 59.248, 1.4485 }, { 89.071, 59.546, 1.4515 }, { 89.105, 59.844,
						1.4545 }, { 89.139, 60.142, 1.4574 }, { 89.172, 60.44, 1.4604 }, { 89.205,
						60.738, 1.4632 }, { 89.236, 61.037, 1.4661 }, { 89.266, 61.335, 1.4688 }, {
						89.296, 61.634, 1.4716 }, { 89.325, 61.932, 1.4743 }, { 89.353, 62.231,
						1.477 }, { 89.381, 62.53, 1.4796 }, { 89.407, 62.828, 1.4822 }, { 89.433,
						63.127, 1.4848 }, { 89.458, 63.426, 1.4873 }, { 89.482, 63.725, 1.4898 }, {
						89.506, 64.024, 1.4923 }, { 89.528, 64.323, 1.4947 }, { 89.551, 64.623,
						1.4971 }, { 89.572, 64.922, 1.4994 }, { 89.593, 65.221, 1.5017 }, { 89.613,
						65.52, 1.504 }, { 89.632, 65.82, 1.5062 }, { 89.651, 66.119, 1.5084 }, {
						89.669, 66.419, 1.5106 }, { 89.686, 66.718, 1.5127 }, { 89.703, 67.018,
						1.5147 }, { 89.719, 67.317, 1.5168 }, { 89.735, 67.617, 1.5188 }, { 89.75,
						67.917, 1.5207 }, { 89.764, 68.216, 1.5227 }, { 89.778, 68.516, 1.5246 }, {
						89.791, 68.816, 1.5264 }, { 89.804, 69.115, 1.5282 },
				{ 89.816, 69.415, 1.53 }, { 89.828, 69.715, 1.5317 }, { 89.839, 70.015, 1.5334 }, {
						89.85, 70.314, 1.5351 }, { 89.86, 70.614, 1.5367 },
				{ 89.87, 70.914, 1.5383 }, { 89.879, 71.214, 1.5398 }, { 89.888, 71.514, 1.5414 }, {
						89.897, 71.814, 1.5428 }, { 89.904, 72.114, 1.5443 }, { 89.912, 72.414,
						1.5457 }, { 89.919, 72.713, 1.547 }, { 89.926, 73.013, 1.5483 }, { 89.932,
						73.313, 1.5496 }, { 89.938, 73.613, 1.5509 }, { 89.944, 73.913, 1.5521 }, {
						89.949, 74.213, 1.5532 }, { 89.954, 74.513, 1.5544 }, { 89.959, 74.813,
						1.5555 }, { 89.963, 75.113, 1.5565 }, { 89.967, 75.413, 1.5575 }, { 89.971,
						75.713, 1.5585 }, { 89.974, 76.013, 1.5595 }, { 89.977, 76.313, 1.5604 }, {
						89.98, 76.613, 1.5612 }, { 89.983, 76.913, 1.5621 }, { 89.985, 77.213,
						1.5629 }, { 89.987, 77.513, 1.5636 }, { 89.989, 77.813, 1.5643 }, { 89.991,
						78.113, 1.565 }, { 89.992, 78.413, 1.5657 }, { 89.994, 78.713, 1.5663 }, {
						89.995, 79.013, 1.5668 }, { 89.996, 79.313, 1.5674 }, { 89.997, 79.613,
						1.5679 }, { 89.998, 79.913, 1.5683 }, { 89.998, 80.213, 1.5687 }, { 89.999,
						80.513, 1.5691 }, { 89.999, 80.813, 1.5694 }, { 89.999, 81.113, 1.5697 }, {
						90, 81.413, 1.57 }, { 90, 81.713, 1.5702 }, { 90, 82.013, 1.5704 }, { 90,
						82.313, 1.5706 }, { 90, 82.613, 1.5707 }, { 90, 82.913, 1.5708 }, { 90,
						83.213, 1.5708 }, { 90, 83.513, 1.5708 }, { 90, 83.513, 1.5708 }, { 90,
						83.813, 1.5708 }, { 90, 84.113, 1.5708 }, { 90, 84.413, 1.5708 }, { 90,
						84.713, 1.5708 }, { 90, 85.013, 1.5708 }, { 90, 85.313, 1.5708 }, { 90,
						85.613, 1.5708 }, { 90, 85.913, 1.5708 }, { 90, 86.213, 1.5708 }, { 90,
						86.513, 1.5708 }, { 90, 86.813, 1.5708 }, { 90, 87.113, 1.5708 }, { 90,
						87.413, 1.5708 }, { 90, 87.713, 1.5708 }, { 90, 88.013, 1.5708 }, { 90,
						88.313, 1.5708 }, { 90, 88.613, 1.5708 }, { 90, 88.913, 1.5708 }, { 90,
						89.213, 1.5708 }, { 90, 89.513, 1.5708 }, { 90, 89.813, 1.5708 }, };
		return Position(data[index][0], data[index][1], data[index][2]);
	}
};

class MoveAction {
public:
	MoveAction(Buzzer *bz, Encoders *enc, MPU6500 *mpu, Reflector *rfl, WallDetector *wd,
			SpeedController *sc) :
			bz(bz), enc(enc), mpu(mpu), rfl(rfl), wd(wd), sc(sc),
					thread(PRIORITY_MOVE_ACTION, STACK_SIZE_MOVE_ACTION) {
		_actions = 0;
		set_params(600);
		ticker.attach_us(this, &MoveAction::isr, MOVE_ACTION_PERIOD);
	}
	enum ACTION {
		START_STEP,
		START_INIT,
		GO_STRAIGHT,
		TURN_LEFT_90,
		TURN_RIGHT_90,
		RETURN,
		STOP,
		FAST_START_STEP,
		FAST_GO_STRAIGHT,
		FAST_GO_DIAGONAL,
		FAST_GO_HALF,
		FAST_TURN_LEFT_45,
		FAST_TURN_LEFT_90,
		FAST_TURN_RIGHT_45,
		FAST_TURN_RIGHT_90,
		FAST_STOP,
	};
	const char* action_string(enum ACTION action) {
		static const char name[][32] = { "start_step", "start_init", "go_straight", "turn_left_90",
				"turn_right_90", "return", "stop", "fast_start_step", "fast_go_straight",
				"fast_go_diagonal", "fast_go_half", "fast_turn_left_45", "fast_turn_left_90",
				"fast_turn_right_45", "fast_turn_right_90", "fast_stop" };
		return name[action];
	}
	void enable() {
		rfl->enable();
		sc->enable();
		thread.start(this, &MoveAction::task);
		printf("0x%08X: Move Action\n", (unsigned int) thread.gettid());
	}
	void disable() {
		thread.terminate();
		sc->disable();
		rfl->disable();
		while (1) {
			osEvent evt = queue.get(1);
			if (evt.status != osEventMessage) {
				break;
			}
		}
		_actions = 0;
	}
	void set_action(enum ACTION action) {
		_actions++;
		queue.put((enum ACTION*) action);
	}
	void set_params(float fast_speed) {
		this->fast_speed = fast_speed;
	}
	void set_params_relative(float add) {
		this->fast_speed += add;
	}
	int actions() const {
		return _actions;
	}
private:
	Buzzer *bz;
	Encoders *enc;
	MPU6500 *mpu;
	Reflector *rfl;
	WallDetector *wd;
	SpeedController *sc;
	Thread thread;
	Ticker ticker;
	Queue<enum ACTION, 128> queue;
	Timer timer;
	int _actions;
	float fast_speed;

	void isr() {
		thread.signal_set(0x01);
	}
	void wall_avoid() {
#if WALL_AVOID_ENABLED
		void wall_attach() {
			if (wd->wall().side[0]) {
				sc->position.y -= wd->wall_difference().side[0] * 0.00001 * sc->actual().trans;
			}
			if (wd->wall().side[1]) {
				sc->position.y += wd->wall_difference().side[1] * 0.00001 * sc->actual().trans;
			}
		}
#endif
	}
	void wall_attach() {
#if WALL_ATTACH_ENABLED
		if (wd->wall().flont[0] && wd->wall().flont[1]) {
			while (1) {
				float trans = wd->wall_difference().flont[0] + wd->wall_difference().flont[1];
				float rot = wd->wall_difference().flont[1] - wd->wall_difference().flont[0];
				const float trans_saturation = 0.4f;
				const float rot_saturation = 0.4f;
				if (trans > trans_saturation) trans = trans_saturation;
				if (trans < -trans_saturation) trans = -trans_saturation;
				if (rot > rot_saturation) rot = rot_saturation;
				if (rot < -rot_saturation) rot = -rot_saturation;
				sc->set_target(trans * 500, rot * 5);
				if (fabs(trans) < 0.1f && fabs(rot) < 0.1f) break;
				Thread::wait(1);
			}
			sc->set_target(0, 0);
			sc->position.x = 0;
			printf("Wall Attach:\t(%05.1f, %05.1f, %04.2f)\n", error.x, error.y, error.theta);
		}
#endif
	}
	void acceleration(float speed, float target_distance, float accel = 6000) {
		timer.reset();
		timer.start();
		float v0 = sc->actual().trans;
		while (1) {
			Thread::signal_wait(0x01);
			if (sc->actual().trans > speed) break;
			if (sc->position.x > target_distance) break;
			float trans = v0 + timer.read() * accel;
			sc->set_target(trans, 0);
			wall_avoid();
		}
		while (1) {
			Thread::signal_wait(0x01);
			if (sc->position.x > target_distance) break;
			sc->set_target(speed, 0);
			wall_avoid();
		}
		sc->position -= Position(target_distance, 0, 0);
	}
	void deceleration(float speed, float target_distance, float accel = 6000) {
		while (1) {
			Thread::signal_wait(0x01);
			if (fabs(sc->actual().trans) < 5) break;
			float extra = target_distance - sc->position.x;
			float target_speed = sqrt(2 * accel * fabs(extra));
			target_speed = (target_speed > speed) ? speed : target_speed;
			if (extra > 0) {
				sc->set_target(target_speed, 0);
			} else {
				sc->set_target(-target_speed, 0);
			}
			wall_avoid();
		}
		sc->set_target(0, 0);
		sc->position -= Position(target_distance, 0, 0);
	}
	void turn(float target_angle, float speed) {
		const float accel = 64 * M_PI;
		timer.reset();
		timer.start();
		while (1) {
			Thread::signal_wait(0x01);
			if (fabs(sc->actual().rot) > speed) break;
			if (target_angle > 0) {
				sc->set_target(0, timer.read() * accel);
			} else {
				sc->set_target(0, -timer.read() * accel);
			}
		}
		while (1) {
			Thread::signal_wait(0x01);
			if (fabs(sc->actual().rot) < 0.5) break;
			float extra = target_angle - sc->position.theta;
			float target_speed = sqrt(2 * accel * fabs(extra));
			target_speed = (target_speed > speed) ? speed : target_speed;
			if (extra > 0) {
				sc->set_target(0, target_speed);
			} else {
				sc->set_target(0, -target_speed);
			}
		}
		sc->position.rotate(-target_angle);
	}
	void curve_left(const float velocity) {
		Curve90 cv90;
		int cnt = 0;
		while (1) {
			if (sc->position.y > 90) break;
			Thread::signal_wait(0x01);
			Position dir = cv90.getNextDir(sc->position, velocity * MOVE_ACTION_PERIOD / 1000000);
			sc->set_target(dir.x * 1000, dir.theta * TRAJECTORY_PROP_GAIN);
			if (cnt % 10 == 0) {
//				printf("%.3f\t%.3f\t%.4f\n", dir.x, dir.y, dir.theta);
			}
			cnt++;
		}
		sc->set_target(velocity, 0);
		sc->position = (sc->position - Position(90, 90, 0)).rotate(-M_PI / 2);
	}
	void straight_x(const float distance, const float v0, const float v1, const float v2,
			const float accel = 9000) {
		Straight st;
		timer.reset();
		timer.start();
		int cnt = 0;
		// acceleration
		while (1) {
			if (sc->actual().trans > v1) break;
			if (sc->position.x > distance / 2) break;
			Thread::signal_wait(0x01);
			float velocity = v0 + timer.read() * accel;
			Position dir = st.getNextDir(sc->position, velocity * MOVE_ACTION_PERIOD / 1000000);
			sc->set_target(dir.x * 1000, dir.theta * TRAJECTORY_PROP_GAIN);
			if (cnt % 10 == 0) {
//				printf("%.3f\t%.3f\t%.4f\n", dir.x, dir.y, dir.theta);
			}
			cnt++;
			wall_avoid();
		}
		// deceleration
		while (1) {
			if (sc->position.x > distance) break;
			Thread::signal_wait(0x01);
			float extra = distance - sc->position.x;
			float velocity = sqrt(2 * accel * fabs(extra) + v2 * v2);
			if (velocity > v1) velocity = v1;
			if (extra > 0) {
				Position dir = st.getNextDir(sc->position, velocity * MOVE_ACTION_PERIOD / 1000000);
				sc->set_target(dir.x * 1000, dir.theta * TRAJECTORY_PROP_GAIN);
				if (cnt % 10 == 0) {
//					printf("%.3f\t%.3f\t%.4f\n", dir.x, dir.y, dir.theta);
				}
				cnt++;
			} else {
				sc->set_target(-velocity, 0);
			}
			wall_avoid();
		}
		sc->set_target(v2, 0);
		sc->position -= Position(distance, 0, 0);
	}
	void task() {
		while (1) {
			osEvent evt = queue.get();
			if (evt.status != osEventMessage) {
				printf("Error!\n");
				continue;
			}
			enum ACTION action = (enum ACTION) evt.value.v;
			printf("Action:\t%s\n", action_string(action));
			printf("Start:\t(%06.1f, %06.1f, %06.3f)\n", sc->position.x, sc->position.y,
					sc->position.theta);
			const float velocity = 600;
			switch (action) {
				case START_STEP:
					sc->position.reset();
					straight_x(180 - 24 - 6, 0, velocity, velocity);
					break;
				case START_INIT:
					break;
				case GO_STRAIGHT:
					straight_x(180, velocity, 1200, velocity);
					break;
				case TURN_LEFT_90:
					curve_left(velocity);
					break;
				case TURN_RIGHT_90:
					break;
				case RETURN:
					break;
				case STOP:
					straight_x(90, velocity, velocity, 0);
					wall_attach();
					sc->set_target(0, 0);
					break;
				case FAST_START_STEP:
					break;
				case FAST_GO_STRAIGHT:
					break;
				case FAST_GO_DIAGONAL:
					break;
				case FAST_GO_HALF:
					break;
				case FAST_TURN_LEFT_45:
					break;
				case FAST_TURN_LEFT_90:
					break;
				case FAST_TURN_RIGHT_45:
					break;
				case FAST_TURN_RIGHT_90:
					break;
				case FAST_STOP:
					break;
			}
			_actions--;
			printf("Error:\t(%06.1f, %06.1f, %06.3f)\n", sc->position.x, sc->position.y,
					sc->position.theta);
			Thread::wait(10);
		}
	}
};

#endif /* MOVEACTION_H_ */
